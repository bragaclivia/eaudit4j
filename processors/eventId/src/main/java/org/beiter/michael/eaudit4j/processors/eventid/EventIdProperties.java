/*
 * #%L
 * This file is part of eAudit4j, a library for creating pluggable
 * auditing solutions, providing an audit processor that creates
 * a random event ID that is appended as a field to audit events.
 * %%
 * Copyright (C) 2015 - 2016 Michael Beiter <michael@beiter.org>
 * %%
 * All rights reserved.
 * .
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names of the
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 * .
 * .
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
package org.beiter.michael.eaudit4j.processors.eventid;

import org.apache.commons.lang3.Validate;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * This class specifies properties specific to the Event ID Processor.
 */
// suppress warnings about the long variable names
@SuppressWarnings("PMD.LongVariable")
public class EventIdProperties {

    /**
     * @see EventIdProperties#setLength(int)
     */
    private int length;

    /**
     * @see EventIdProperties#setEventFieldName(String)
     */
    private String eventFieldName;

    /**
     * @see EventIdProperties#setAdditionalProperties(Map)
     */
    private Map<String, String> additionalProperties = new ConcurrentHashMap<>();

    /**
     * Constructs an empty set of event ID properties, with most values being set to <code>null</code>, 0, or empty
     * (depending on the type of the property). Usually this constructor is used if this configuration POJO is populated
     * in an automated fashion (e.g. injection). If you need to build them manually (possibly with defaults), use or
     * create a properties builder.
     * <p>
     * You can change the defaults with the setters.
     *
     * @see org.beiter.michael.eaudit4j.common.propsbuilder.MapBasedCommonPropsBuilder#buildDefault()
     * @see org.beiter.michael.eaudit4j.common.propsbuilder.MapBasedCommonPropsBuilder#build(Map)
     */
    public EventIdProperties() {

        // no code here, constructor just for java docs
    }

    /**
     * Creates a set of event ID properties from an existing set of event ID properties, making a defensive copy.
     *
     * @param properties The set of properties to copy
     * @throws NullPointerException When {@code properties} is {@code null}
     * @see EventIdProperties ()
     */
    public EventIdProperties(final EventIdProperties properties) {

        this();

        Validate.notNull(properties, "The validated object 'properties' is null");

        setLength(properties.getLength());
        setEventFieldName(properties.getEventFieldName());
        setAdditionalProperties(properties.getAdditionalProperties());
    }

    /**
     * @return the length of the (random) event ID generated by this processor
     * @see EventIdProperties#setLength(int)
     */
    public final int getLength() {

        // no need for defensive copies of int

        return length;
    }

    /**
     * The length in chars of the (random) event ID that is generated by this processor.
     * <p>
     * The entropy of this random String is approximately 3/4 of the overall String length.
     *
     * @param length the length of the (random) event ID generated by this processor (must be greater 0)
     * @throws IllegalArgumentException When the provided value of {@code eventIdLength} is out of range
     */
    public final void setLength(final int length) {

        Validate.inclusiveBetween(1, Integer.MAX_VALUE, length);

        // no need for defensive copies of int

        this.length = length;
    }

    /**
     * @return The field name used to store the event ID in events
     * @see EventIdProperties#setEventFieldName(String)
     */
    public final String getEventFieldName() {

        // no need for defensive copies of String

        return eventFieldName;
    }

    /**
     * Set the field name to be used when storing the event ID in audit events
     *
     * @param eventFieldName The field name to store the event ID in
     * @throws NullPointerException     When the {@code eventFieldName} is {@code null}
     * @throws IllegalArgumentException When the {@code eventFieldName} is {@code empty}
     */
    public final void setEventFieldName(final String eventFieldName) {

        Validate.notBlank(eventFieldName, "The validated character sequence 'eventFieldName' is null or empty");

        // no need for defensive copies of String

        this.eventFieldName = eventFieldName;
    }

    /**
     * @return Any additional properties stored in this object that have not explicitly been parsed
     * @see EventIdProperties#setAdditionalProperties(Map)
     */
    public final Map<String, String> getAdditionalProperties() {

        // create a defensive copy of the map and all its properties
        if (this.additionalProperties == null) {
            // this should never happen!
            return new ConcurrentHashMap<>();
        } else {
            final Map<String, String> tempMap = new ConcurrentHashMap<>();
            // putAll() is safe here, because we always apply it on a ConcurrentHashMap
            tempMap.putAll(additionalProperties);

            return tempMap;
        }
    }

    /**
     * Any additional properties which have not been parsed, and for which no getter/setter exists, but are to be
     * stored in this object nevertheless.
     * <p>
     * This property is commonly used to preserve original properties from upstream components that are to be passed
     * on to downstream components unchanged. This properties set may or may not include properties that have been
     * extracted from the map, and been made available through this POJO.
     * <p>
     * Note that these additional properties may be <code>null</code> or empty, even in a fully populated POJO where
     * other properties commonly have values assigned to.
     *
     * @param additionalProperties The additional properties to store
     */
    public final void setAdditionalProperties(final Map<String, String> additionalProperties) {

        // create a defensive copy of the map and all its properties
        if (additionalProperties == null) {
            // create a new (empty) properties map if the provided parameter was null
            this.additionalProperties = new ConcurrentHashMap<>();
        } else {
            // create a defensive copy of the map and all its properties
            // the code looks a little more complicated than a simple "putAll()", but it catches situations
            // where a Map is provided that supports null values (e.g. a HashMap) vs Map implementations
            // that do not (e.g. ConcurrentHashMap).
            this.additionalProperties = new ConcurrentHashMap<>();
            for (final Map.Entry<String, String> entry : additionalProperties.entrySet()) {
                final String key = entry.getKey();
                final String value = entry.getValue();

                if (value != null) {
                    this.additionalProperties.put(key, value);
                }
            }
        }
    }
}
